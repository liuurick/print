! function(e) {
	"function" == typeof window.define ? window.define.amd ? window.define(e) : window.define.cmd ? window.define(function(
		t, n, i) {
		return e
	}) : e() : "object" == typeof module && "object" == typeof module.exports ? (require("../css/editor.min.css"), module
		.exports = e()) : e()
}(function() {
	function e(e, t, n, i) {
		if (this.tagName = e) {
			var o, a;
			i ? (this.props = t, this.children = n, this.handles = i) : (c.isObject(o = arguments[1]) && !c.isFunction(o.click) ?
				this.props = o : c.isArray(o) ? this.children = o : this.handles = o, c.isArray(a = arguments[2]) ? this.children =
				a : this.handles = a)
		}
	}

	function t(t, n, i, o) {
		return new e(t, n, i, o).render()
	}
	window.Edit = window.Edit || {};
	var n = {};
	Edit.instants = {}, Edit.commands = {}, Edit.customizeUI = {};
	var i = 0,
		o = 0,
		a = {};
	e.prototype.render = function() {
		var e = document.createElement(this.tagName),
			t = this.props || {},
			n = this.children || [],
			i = this.handles || {};
		for (var o in t) t[o] && e.setAttribute(o, t[o]);
		for (var a in i) e.addEventListener(a, i[a], !1);
		return n.forEach(function(t) {
			c.isArray(t) ? t.forEach(function(t) {
				t && (t instanceof HTMLElement ? e.appendChild(t) : e.insertAdjacentHTML("beforeend", t))
			}) : t && (t instanceof HTMLElement ? e.appendChild(t) : e.insertAdjacentHTML("beforeend", t))
		}), e
	};
	var r = function() {};
	r.prototype = {
		addListener: function(e, t) {
			var n = this,
				i = e.split(" ");
			return this.hasOwnProperty("listeners") || this.listeners || (this.listeners = {}), i.forEach(function(e) {
				n.listeners[e] || (n.listeners[e] = []), n.listeners[e].push(t)
			}), this
		},
		on: function(e, t) {
			return this.addListener(e, t)
		},
		once: function(e, t) {
			function n() {
				return this.removeListener(e, n), t.apply(this, arguments)
			}
			return this.addListener(e, n)
		},
		removeListener: function(e, t) {
			var n, i, o, a = this;
			return 0 === arguments.length ? (this.listeners = {}, this) : (n = e.split(" "), n.forEach(function(e) {
				if (o = null != (i = a.listeners) ? i[e] : void 0) return t ? void o.forEach(function(e, n) {
					e === t && (o.splice(n, 1), a.listeners[e] = o)
				}) : delete a.listeners[e]
			}), this)
		},
		off: function(e, t) {
			return this.removeListener(e, t)
		},
		listenerList: function(e) {
			return this.listeners[e]
		},
		emit: function() {
			var e, t, n, i, o = this;
			if (e = arguments.length >= 1 ? [].slice.call(arguments, 0) : [], n = e.shift(), i = null != (t = this.listeners) ?
				t[n] : void 0) return i.forEach(function(t) {
				t.apply(o, e)
			}), !0
		},
		bind: function(e, t, n, i, o) {
			o = !!o;
			var a = c.isArray(t) ? t : t.trim().split(/\s+/),
				r = a.length;
			if (r)
				if (c.isString(n))
					for (; r--;) e.addEventListener(a[r], function(e) {
						c.each(this.querySelectorAll(n), function(t) {
							(e.target === t || t.contains(e.target)) && i.call(t, e)
						})
					}, o);
				else
					for (i = !!i; r--;) e.addEventListener(a[r], n, i);
			e = null
		},
		trigger: function(e, t) {
			var n = document.createEvent("HTMLEvents");
			n.initEvent(t, !0, !1), e.dispatchEvent(n)
		}
	}, Edit.langs = {}, Edit.langs["zh-ch"] = {
		code: "源码",
		bold: "粗体",
		italic: "斜体",
		underline: "下划线",
		strikethrough: "删除线",
		forecolor: "文字颜色",
		backcolor: "背景色",
		removeformat: "清除格式",
		quotes: "引用",
		fontname: "字体",
		fontsize: "字号",
		heading: "标题",
		indent: "缩进",
		outdent: "取消缩进",
		insertorderedlist: "有序列表",
		insertunorderedlist: "无序列表",
		justifyleft: "左对齐",
		justifycenter: "居中对齐",
		justifyright: "右对齐",
		justifyfull: "两端对齐",
		createlink: "创建链接",
		insertimage: "图片",
		insertvideo: "视频",
		insertcode: "代码",
		undo: "撤销",
		redo: "重做"
	};
	var s = {
			serverUrl: "/file/richtext_img_upload.do",
			serverBase64Url: "/file/richtext_img_upload.do",
			toolbars: ["code", "|", "bold", "italic", "underline", "strikethrough", "forecolor", "backcolor", "removeformat",
				"|", "quotes", "fontname", "fontsize", "heading", "indent", "outdent", "insertorderedlist", "insertunorderedlist",
				"justifyleft", "justifycenter", "justifyright", "justifyfull", "|", "createlink", "insertimage", "insertvideo",
				"insertcode", "|", "undo", "redo"
			],
			fontnames: ["宋体", "黑体", "楷体", "隶书", "幼圆", "微软雅黑", "Arial", "Verdana", "Georgia", "Times New Roman",
				"Microsoft JhengHei", "Trebuchet MS", "Courier New", "Impact", "Comic Sans MS"
			],
			colors: {
				"暗红色": "#880000",
				"紫色": "#800080",
				"红色": "#ff0000",
				"鲜粉色": "#ff00ff",
				"深蓝色": "#000080",
				"蓝色": "#0000ff",
				"湖蓝色": "#00ffff",
				"蓝绿色": "#008080",
				"绿色": "#008000",
				"橄榄色": "#808000",
				"浅绿色": "#00ff00",
				"橙黄色": "#ffcc00",
				"灰色": "#808080",
				"银色": "#c0c0c0",
				"黑色": "#000000",
				"白色": "#ffffff"
			},
			fontsizes: {
				"12px": 1,
				"13px": 2,
				"16px": 3,
				"18px": 4,
				"24px": 5,
				"32px": 6,
				"48px": 7
			},
			headings: {
				"标题1": "h1",
				"标题2": "h2",
				"标题3": "h3",
				"标题4": "h4",
				"标题5": "h5",
				"标题6": "h6"
			},
			lang: Edit.langs["zh-ch"],
			resize: !1,
			focus: !0
		},
		c = Edit.utils = {
			each: function(e, t, n) {
				if (null != e)
					if (e.length === +e.length) {
						for (var i = 0, o = e.length; i < o; i++)
							if (t.call(n, e[i], i, e) === !1) return !1
					} else
						for (var a in e)
							if (e.hasOwnProperty(a) && t.call(n, e[a], a, e) === !1) return !1
			},
			map: function(e, t, n) {
				if (null != e) {
					var i = [];
					if (e.length === +e.length)
						for (var o = 0, a = e.length; o < a; o++) i.push(t.call(n, e[o], o, e));
					else
						for (var r in e) e.hasOwnProperty(r) && i.push(t.call(n, e[r], r, e));
					return i
				}
			},
			extend: function(e) {
				return Array.prototype.slice.call(arguments, 1).forEach(function(t) {
					for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n])
				}), e
			},
			inherits: function(e, t) {
				var n = e.prototype,
					i = t.prototype;
				return c.extend(i, n), e.prototype = i, i.constructor = e
			},
			parseColor: function(e) {
				var t, n, i;
				if (/rgb/.test(e)) {
					var o = e.match(/\d+/g);
					t = parseInt(o[0]), n = parseInt(o[1]), i = parseInt(o[2])
				} else {
					if (!/#/.test(e)) return e;
					var a = e.length;
					7 === a ? (t = parseInt(e.slice(1, 3), 16), n = parseInt(e.slice(3, 5), 16), i = parseInt(e.slice(5), 16)) : 4 ===
						a && (t = parseInt(e.charAt(1) + e.charAt(1), 16), n = parseInt(e.charAt(2) + e.charAt(2), 16), i = parseInt(e.charAt(
							3) + e.charAt(3), 16))
				}
				return {
					r: t,
					g: n,
					b: i
				}
			},
			parseUrl: function(e, t) {
				var n, i = new RegExp("(^|&)" + e + "=([^&]*)(&|$)");
				if (t) {
					var o = t.indexOf("?");
					o !== -1 && (t = t.substr(o + 1)), n = t.match(i)
				} else n = window.location.search.substr(1).match(i);
				return null != n ? decodeURI(n[2]) : null
			},
			rangeEqual: function(e, t) {
				var n = "collapsed commonAncestorContainer endContainer endOffset startContainer startOffset".split(" "),
					i = !0;
				return n.forEach(function(n) {
					if (e[n] !== t[n]) return i = !1
				}), i
			}
		};
	["String", "Function", "Array", "Number", "RegExp", "Object", "Date"].forEach(function(e) {
		c["is" + e] = function(t) {
			return {}.toString.call(t) === "[object " + e + "]"
		}
	}), c.extend(c, r.prototype);
	var d = Edit.ui = {
		createEl: t,
		offset: function(e) {
			Edit.utils.isString(e) && (e = document.getElementById(e));
			var t = e.getBoundingClientRect();
			return {
				left: t.left,
				top: t.top
			}
		},
		getPanelOffset: function(e) {
			return "position:absolute;left:" + this.offset(e).left + "px;top:" + (this.offset(e).top + this.height(e)) + "px"
		},
		height: function(e) {
			return Edit.utils.isString(e) && (e = document.getElementById(e)), e.offsetHeight
		},
		width: function(e) {
			return Edit.utils.isString(e) && (e = document.getElementById(e)), e.offsetWidth
		},
		closePanel: function(e) {
			var t = e && e.target || document,
				n = document.getElementById("eui-panel-wrap");
			n && t !== n && !n.contains(t) && (n.parentNode.removeChild(n), document.body.style.overflow = "visible")
		},
		closeDialog: function(e) {
			var t = e && e.target || document,
				n = document.getElementById("eui-dialog-wrap");
			n && t !== n && !n.contains(t) && (n.parentNode.removeChild(n), document.body.style.overflow = "visible")
		},
		panelOffset: function(e) {
			var t = document.querySelector(".eui-panel");
			Edit.ui.offset(t).left + t.offsetWidth > Edit.ui.offset(e.container).left + e.container.offsetWidth && (t.style.left =
				Edit.ui.offset(e.container).left + e.container.offsetWidth - t.offsetWidth + "px")
		},
		bodyNotScroll: function(e) {
			var t = this.scrollTop,
				n = this.scrollHeight,
				i = this.clientHeight,
				o = e.wheelDelta ? e.wheelDelta : -(e.detail || 0);
			(o > 0 && t <= o || o < 0 && n - i - t <= -1 * o) && (this.scrollTop = o > 0 ? 0 : n, e.preventDefault())
		}
	};
	d.Stateful = {
		getDom: function() {
			var e = this.content && this.content.ownerDocument || document;
			return e.getElementById(this.id)
		},
		removeDom: function() {
			var e = this.getDom();
			e.parentNode.removeChild(e)
		},
		hasState: function(e) {
			return this.getDom().classList.contains("edui-state-" + e)
		},
		addState: function(e) {
			this.hasState(e) || this.getDom().classList.add("edui-state-" + e)
		},
		removeState: function(e) {
			this.hasState(e) && this.getDom().classList.remove("edui-state-" + e)
		},
		isDisabled: function() {
			return this.hasState("disabled")
		},
		setDisabled: function(e) {
			e ? this.addState("disabled") : this.removeState("disabled")
		},
		isChecked: function() {
			return this.hasState("checked")
		},
		setChecked: function(e) {
			!this.isDisabled() && e ? this.addState("checked") : this.removeState("checked")
		}
	}, d.Button = function(e) {
		this.id = "uid" + o++, this.name = e.name, this.title = e.title, this.className = e.className, this.style = e.style,
			this.handles = e.handles
	}, d.Button.prototype = {
		getHtmlTpl: function() {
			var e = this;
			return d.createEl("li", {
				id: e.id,
				class: "editor-item",
				style: e.style,
				"data-title": e.title,
				draggable: !0
			}, [d.createEl("span", {
				class: "eicon " + e.className
			})], e.handles)
		}
	}, c.extend(d.Button.prototype, d.Stateful), d.Panel = function(e) {
		this.id = "uid" + o++, this.content = e.content, this.handles = {}
	}, d.Panel.prototype = {
		getHtmlTpl: function() {
			return d.createEl("div", {
				id: "eui-panel-wrap",
				class: "eui-panel-wrap"
			}, [this.content], this.handles)
		},
		show: function(e) {
			var t;
			return document.body.appendChild(t = this.getHtmlTpl()), e && e(), t
		}
	}, c.extend(d.Panel.prototype, d.Stateful), d.Dialog = function(e) {
		this.id = "uid" + o++, this.title = e.title || "操作", this.content = e.content, this.confirm = e.confirm, this.handles = {}
	}, d.Dialog.prototype = {
		getHtmlTpl: function() {
			return d.createEl("div", {
				id: "eui-dialog-wrap",
				class: "eui-dialog-wrap"
			}, [d.createEl("div", {
				class: "eui-dialog"
			}, [d.createEl("div", {
				class: "eui-dialog-title"
			}, [this.title, d.createEl("div", {
				class: "eui-dialog-close"
			}, [d.createEl("span", {
				class: "eicon eicon-close"
			}, {
				click: function() {
					d.closeDialog()
				}
			})])]), d.createEl("div", {
				class: "eui-dialog-content"
			}, [this.content]), this.confirm && d.createEl("div", {
				class: "eui-dialog-handles"
			}, [d.createEl("span", {
				class: "eui-dialog-cancel"
			}, ["取消"], {
				click: function() {
					d.closeDialog()
				}
			}), d.createEl("span", {
				class: "eui-dialog-confirm"
			}, ["确定"], {
				click: this.confirm
			})])])], this.handles)
		},
		show: function(e) {
			var t;
			return document.body.appendChild(t = this.getHtmlTpl()), e && e(), t
		}
	}, c.extend(d.Dialog.prototype, d.Stateful), d.Popup = function(e) {
		this.id = "uid" + o++, this.content = e.content, this.handles = e.handles
	}, d.Popup.prototype = {
		getHtmlTpl: function() {
			return d.createEl("div", {
				id: this.id,
				class: "editor-popup"
			}, [this.content], this.handles)
		},
		show: function(e) {
			var t;
			return e.appendChild(t = this.getHtmlTpl()), t
		}
	}, c.extend(d.Popup.prototype, d.Stateful);
	var l = (Edit.Ajax = function(e, t, n, i, o) {
		if (e) {
			t = t.toUpperCase();
			var a = new XMLHttpRequest;
			a.open(t, e, !0), a.onload = function() {
				this.status >= 200 && this.status < 400 ? i && i(JSON.parse(this.response)) : o && o(this.response)
			}, a.onerror = function() {
				o(this.response)
			}, "POST" === t ? a.send(n) : a.send()
		}
	}, Edit.plugin = function() {
		var e = {};
		return {
			register: function(t, n) {
				e[t] = {
					optionName: t,
					execFn: n
				}
			},
			load: function(t) {
				c.each(e, function(e) {
					var n = e.execFn.call(t);
					n && c.each(n, function(e, n) {
						switch (n.toLowerCase()) {
							case "bindevents":
								c.each(e, function(e, n) {
									t.addListener(n, e)
								});
								break;
							case "commands":
								c.each(e, function(e, n) {
									t.commands[n] = e
								})
						}
					})
				})
			},
			run: function(t, n) {
				var i = e[t];
				i && i.execFn.call(n)
			}
		}
	}());
	Edit.getEditor = function(e, t) {
		var i = n[e];
		return i || (i = n[e] = new Edit.Editor(t), i.render(e)), i
	}, Edit.delEditor = function(e) {
		var t;
		(t = n[e]) && (t.key && t.destroy(), delete n[e], delete a[e])
	}, Edit.registerUI = function(e, t) {
		c.each(e.split(/\s+/), function(e) {
			Edit.customizeUI[e] = {
				execFn: t
			}
		})
	};
	var u = Edit.Editor = function(e) {
		this.eid = i++, this.commands = {}, this.buttons = {};
		var t = {};
		c.each(s, function(e, n) {
			t[n] = e
		}), this.options = c.extend(t, e), Edit.plugin.load(this), Edit.instants["editorInstant" + this.eid] = this
	};
	u.prototype = {
		registerCommand: function(e, t) {
			this.commands[e] = t
		},
		ready: function(e) {
			var t = this;
			e && (t.isReady ? e.apply(t) : t.addListener("ready", e))
		},
		initToolbar: function(e) {
			var t = this,
				n = this.options.toolbars || [],
				i = [];
			n.forEach(function(e) {
				var n;
				"|" == e ? n = "separator" : t.buttons[e] = n = new Edit.ui[e](t), i.push(n)
			}), c.each(Edit.customizeUI, function(e, n) {
				var o;
				o = e.execFn.call(t, t, n), o && (t.buttons[n] = o, i.push(o))
			});
			var o = Edit.ui.createEl("ul", {
				class: "editor-toolbar"
			}, {
				click: function() {
					t.emit("selectionchange")
				}
			});
			i.forEach(function(e) {
				var t;
				t = "separator" == e ? Edit.ui.createEl("li", {
					id: e.id,
					class: "editor-item editor-separator",
					draggable: !0
				}) : e.getHtmlTpl(), o.appendChild(t)
			}), e.insertBefore(o, e.firstChild)
		},
		render: function(e) {
			if (c.isString(e)) {
				var t = this,
					n = this.options || {};
				if (t.key = e, e = document.getElementById(e)) {
					a[t.key] = {}, t.options.initialContent = n.initialContent || e.innerHTML, e.innerHTML = "";
					var i = t.container = Edit.ui.createEl("div", {
							id: "edui" + t.eid,
							class: "editor-container"
						}),
						o = ["<!DOCTYPE html>", "<html class='view'>", "<head><meta charset='UTF-8'><link rel='stylesheet' href=''>",
							"<style>", "html,body {margin:0; padding:0; word-wrap:break-word; cursor:text; height:100%;}",
							"body {padding: 8px; font-family: sans-serif; font-size: 14px;box-sizing:border-box;}", "p {margin: 5px 0}",
							".editor-floatmenu{position:absolute;background:rgba(51,51,51,.9);;border:1px solid #f0f3f6;line-height:26px;border-radius:4px;overflow:hidden;}",
							".editor-floatmenu>span{display:inline-block;padding:0 10px;cursor:pointer;color:#fff;font-size:12px;}",
							".editor-floatmenu>span:hover{background:rgba(51,51,51,.9);}", "</style>", "</head>",
							"<body class='view'><p><br></p></body>", "<script id='_script'>",
							"(function(){window.editor = window.parent.Edit.instants['editorInstant" + t.eid +
							"'];editor.setup(document);})();",
							"var _script = document.getElementById('_script');_script.parentNode.removeChild(_script);", "</script>",
							"</html>"
						].join("");
					i.appendChild(Edit.ui.createEl("iframe", {
						id: "editor_" + t.eid,
						class: "editor-iframe",
						src: 'javascript:void(function(){document.open();document.write("' + o + '");document.close();}())'
					})), e.appendChild(i), t.options.resize && i.appendChild(Edit.ui.createEl("span", {
						class: "eicon eicon-resize",
						style: "position:absolute;bottom:0;right:0;cursor:nwse-resize;font-size:12px;"
					}, {
						mousedown: function(t) {
							function n(t) {
								var n = (e.offsetWidth + (t.clientX - e.offsetWidth - o.left), e.offsetHeight + (t.clientY - e.offsetHeight -
									o.top));
								n > 80 && (e.style.height = n + "px")
							}
							var o = (t.clientY, t.clientX, e.getBoundingClientRect());
							document.addEventListener("mousemove", n), document.addEventListener("mouseup", function() {
								this.removeEventListener("mousemove", n)
							});
							var a = document;
							i.querySelector("iframe").addEventListener("mouseover", function() {
								a.removeEventListener("mousemove", n)
							})
						}
					}))
				}
			}
		},
		setup: function(e) {
			var t = this;
			t.options;
			e.body.contentEditable = !0, t.document = e, t.window = e.defaultView || e.parentWindow, t.iframe = t.window.reameElement,
				t.body = e.body, t.initToolbar(t.container), t.initEvents(), t.isReady = 1, t.emit("ready"), t.options.initialContent &&
				setTimeout(function() {
					t.setContent(t.options.initialContent)
				}, 0), t.options.focus && setTimeout(function() {
					t.focus()
				}, 0)
		},
		getContent: function() {
			var e = this;
			return e.filterContent()
		},
		getContentTxt: function() {
			var e = this;
			return e.body.textContent
		},
		getPlainTxt: function() {
			var e = new RegExp("​", "g"),
				t = {
					address: 1,
					blockquote: 1,
					center: 1,
					dir: 1,
					div: 1,
					dl: 1,
					fieldset: 1,
					form: 1,
					h1: 1,
					h2: 1,
					h3: 1,
					h4: 1,
					h5: 1,
					h6: 1,
					hr: 1,
					isindex: 1,
					menu: 1,
					noframes: 1,
					ol: 1,
					p: 1,
					pre: 1,
					table: 1,
					ul: 1
				},
				n = this.body.innerHTML;
			return n = n.replace(/<img[^>]*src\=\"([^>]+)\">/gi, function(e) {
				return e.replace(/src=\"([^>]+)\"/gi, function() {
					return arguments[0].replace(/</gi, "&lt;")
				})
			}).replace(/<(p|div)[^>]*>(<br\/?>|&nbsp;)<\/\1>/gi, "\n").replace(/<br\/?>/gi, "\n").replace(/<[^>\/]+>/g, "").replace(
				/(\n)?<\/([^>]+)>/g,
				function(e, n, i) {
					return t[i] ? "\n" : n ? n : ""
				}), n = n.replace(/\s+?$/g, ""), n.replace(e, "").replace(/\u00a0/g, " ").replace(/&nbsp;/g, " ")
		},
		setContent: function(e, t) {
			var n = this;
			c.isNumber(e) && (e += ""), e = e || "", n.body.innerHTML = (t ? n.body.innerHTML : "") + e, a[n.key].value = n.body
				.innerHTML, n.domFilter();
			var i = n.body.innerHTML;
			a[n.key].value !== i && (n.emit("contentchange"), a[n.key].value = i), n.focus()
		},
		callCmdFn: function(e, t) {
			var n, i, o = t[0].toLowerCase();
			if (n = this.commands[o] || Edit.commands[o], i = n && n[e]) return i.apply(this, t)
		},
		execCommand: function(e) {
			e = e.toLowerCase();
			var t, n = this,
				i = n.commands[e] || Edit.commands[e];
			if (!i || !i.execCommand) return null;
			n.restoreSelection(), t = n.callCmdFn("execCommand", arguments), n.saveSelection();
			var o = n.body.innerHTML;
			return a[n.key].value !== o && (n.emit("contentchange"), a[n.key].value = o), t
		},
		queryCommandState: function(e) {
			return this.callCmdFn("queryCommandState", arguments)
		},
		queryCommandValue: function(e) {
			return this.callCmdFn("queryCommandValue", arguments)
		},
		initEvents: function() {
			var e = this,
				t = e.document,
				n = e.window;
			e.bind(t, ["click", "dblclick", "keydown", "input", "keyup", "keypress", "mousedown", "mouseup", "mouseover",
				"mouseout", "selectstart", "paste", "compositionstart", "compositionend"
			], e.proxyDomEvent.bind(e)), e.bind(n, ["focus", "blur"], e.proxyDomEvent.bind(e)), e.bind(e.body, "drop",
				function(t) {
					var n = e.body.innerHTML;
					a[e.key].value !== n && (e.emit("contentchange"), a[e.key].value = n)
				}), e.on("keydown", function(t) {
				return t.ctrlKey && 13 === t.keyCode ? e.execCommand("inserthtml", "<p><br></p>") : void(13 === t.keyCode && (
					e.matchSelector(e.getRangeElem("pre"), "pre") ? (t.preventDefault(), e.execCommand("inserthtml", "\n")) : e
					.matchSelector(e.getRangeElem("blockquote"), "blockquote") ? (t.preventDefault(), e.execCommand(
						"inserthtml", "<p><br></p>")) : e.matchSelector(e.getRangeElem("li"), "li") || "P" !== e.getRangeElem("p")
					.nodeName && (t.preventDefault(), e.execCommand("inserthtml", "<p><br></p>"))))
			}), e.on("keyup", function(t) {
				if (8 === t.keyCode) {
					var n = e.body.childNodes;
					n.length ? 1 !== n.length || n[0].childNodes.length || (e.body.innerHTML = "<p><br></p>") : e.body.innerHTML =
						"<p><br></p>"
				}
			}), e.selectionChange(), e.contentChange(), e.bind(t, "mousedown", function(e) {
				Edit.ui.closePanel(e)
			}), e.bind(document, "mousedown scroll", function(e) {
				Edit.ui.closePanel(e)
			}), e.options.events && c.isObject(e.options.events) && c.each(e.options.events, function(t, n) {
				e.on(n, function(n) {
					t(e)
				})
			})
		},
		proxyDomEvent: function(e) {
			return this.emit("before" + e.type.replace(/^on/, "").toLowerCase()) !== !1 && (this.emit(e.type.replace(/^on/,
				""), e) !== !1 && this.emit("after" + e.type.replace(/^on/, "").toLowerCase()))
		},
		selectionChange: function() {
			var e, t = this;
			t.on("mouseup keyup paste", function(n) {
				"keyup" == n.type && (n.ctrlKey || n.metaKey || n.shiftKey || n.altKey) || 2 != n.button && (clearTimeout(e),
					e = setTimeout(function() {
						t.saveSelection()
					}, 100))
			})
		},
		contentChange: function() {
			function e() {
				var e = n.body.innerHTML;
				a[n.key].value !== e && (n.emit("contentchange"), a[n.key].value = e)
			}
			var t, n = this,
				i = !1;
			n.on("compositionstart", function(e) {
				i = !0
			}), n.on("compositionend", function(n) {
				i = !1, clearTimeout(t), t = setTimeout(e, 100)
			}), n.on("input paste", function(n) {
				i || (clearTimeout(t), t = setTimeout(e, 100))
			})
		},
		focus: function() {
			var e = this,
				t = e.document.createRange(),
				n = e.body.lastChild;
			t.setStart(n, n.childNodes.length), t.collapse(!0);
			var i = e.document.getSelection();
			i.removeAllRanges(), i.addRange(t), e.body.focus(), e.saveSelection()
		},
		domFilter: function() {
			var e, t = this,
				n = t.body.firstChild;
			if (n)
				for (var i = t.document.createElement("p"); n;) {
					for (; n && (3 == n.nodeType || "img" === n.nodeName.toLowerCase());) e = n.nextSibling, i.appendChild(n), n =
						e;
					if (i.firstChild) {
						if (!n) {
							t.body.appendChild(i);
							break
						}
						n.parentNode.insertBefore(i, n), i = t.document.createElement("p")
					}
					n = n.nextSibling
				} else t.body.innerHTML = "<p><br></p>"
		},
		filterContent: function() {
			var e = this,
				t = e.body.childNodes;
			if (1 === t.length) {
				var n = t[0].childNodes;
				if (1 === n.length && "br" === n[0].nodeName.toLowerCase()) return ""
			}
			return e.body.innerHTML
		},
		getCurrentRange: function() {
			return this.document.getSelection().getRangeAt(0)
		},
		getRangeElem: function(e) {
			var t = this.getCurrentRange();
			if (t) {
				var n = t.commonAncestorContainer;
				if (e) {
					for (; n;) {
						if (n.nodeName.toLowerCase() === e) return n;
						n = n.parentNode
					}
					return this.body
				}
				return 1 === n.nodeType ? n : n.parentNode
			}
		},
		matchSelector: function(e, t) {
			var n = document.documentElement.matchesSelector || document.documentElement.webkitMatchesSelector || document.documentElement
				.mozMatchesSelector || document.documentElement.msMatchesSelector || function(e, t) {
					if (t.tagName === e.toUpperCase()) return !0;
					for (var n = document.querySelectorAll(e), i = n.length; i--;)
						if (n[i] === this) return !0;
					return !1
				};
			return this.matchSelector = function(e, t) {
				return n.call(e, t)
			}, this.matchSelector(e, t)
		},
		saveSelection: function(e) {
			var t = this.getCurrentRange();
			t && (this.currentRange ? this.currentRange && !c.rangeEqual(t, this.currentRange) && this.emit("selectionchange") :
				this.emit("selectionchange"), this.currentRange = t)
		},
		restoreSelection: function() {
			var e = this;
			if (e.currentRange) {
				var t;
				t = e.document.getSelection(), t.removeAllRanges(), t.addRange(e.currentRange), e.body.focus()
			}
		},
		destroy: function() {
			var e = this;
			e.emit("destroy");
			var t = e.container.parentNode,
				n = e.key;
			t.parentNode.removeChild(t), delete Edit.instants["editorInstant" + e.eid];
			for (var i in e) e.hasOwnProperty(i) && delete e[i];
			Edit.delEditor(n)
		},
		clear: function() {
			this.body.innerHTML = "<p><br></p>"
		},
		isEmpty: function() {
			return !this.filterContent()
		}
	}, c.inherits(u, r), Edit.commands.inserthtml = {
		execCommand: function(e, t) {
			var n = this;
			n.document.execCommand("inserthtml", !1, t)
		}
	};
	var m = ["bold", "italic", "underline", "strikethrough", "removeformat", "indent", "outdent", "quotes",
		"insertorderedlist", "insertunorderedlist", "justifyleft", "justifycenter", "justifyright", "justifyfull"
	];
	return m.forEach(function(e) {
		Edit.commands[e] = {
			execCommand: function() {
				this.document.execCommand(e, !1, null)
			},
			queryCommandState: function() {
				return this.document.queryCommandState(e)
			}
		}, Edit.ui[e] = function(t) {
			var n = new Edit.ui.Button({
				name: e,
				className: "eicon-" + e,
				title: t.options.lang[e],
				handles: {
					click: function() {
						t.execCommand(e)
					}
				}
			});
			return t.addListener("selectionchange", function() {
				var i = t.queryCommandState(e);
				i ? n.setChecked(!0) : n.setChecked(!1)
			}), n
		}
	}), ["forecolor", "backcolor"].forEach(function(e) {
		Edit.commands[e] = {
			execCommand: function(e, t) {
				this.document.execCommand(e, !1, t)
			},
			queryCommandState: function(e, t) {
				return this.document.queryCommandState(e)
			},
			queryCommandValue: function(e, t) {
				return this.document.queryCommandValue(e)
			}
		}, Edit.ui[e] = function(t) {
			var n = Edit.utils.map(t.options.colors, function(e, t) {
					var n = Edit.utils.parseColor(e);
					return "rgb(" + n.r + "," + n.g + "," + n.b + ")"
				}),
				i = new Edit.ui.Button({
					name: e,
					className: "eicon-" + e,
					title: t.options.lang[e],
					handles: {
						click: function() {
							if (!i.isDisabled()) {
								var n = this,
									o = new Edit.ui.Panel({
										content: Edit.ui.createEl("ul", {
											class: "menu-list menu-colors",
											style: Edit.ui.getPanelOffset(n.id)
										}, Edit.utils.map(t.options.colors, function(n, i) {
											return Edit.ui.createEl("li", {
												class: "menu-item",
												title: i
											}, [Edit.ui.createEl("span", {
												class: "eicon eicon-" + e,
												style: "color:" + n
											})], {
												click: function(i) {
													t.execCommand(e, n), Edit.ui.closePanel()
												}
											})
										}), {
											mousewheel: Edit.ui.bodyNotScroll
										})
									});
								o.show()
							}
						}
					}
				});
			return t.addListener("selectionchange", function() {
				var o = t.queryCommandValue(e);
				n.indexOf(o.replace(/\s+/g, "")) != -1 ? i.setChecked(!0) : i.setChecked(!1)
			}), i
		}
	}), ["heading"].forEach(function(e) {
		Edit.commands[e] = {
			execCommand: function(e, t) {
				this.document.execCommand("formatblock", !1, t)
			},
			queryCommandState: function(e, t) {
				return this.document.queryCommandState("formatblock")
			},
			queryCommandValue: function(e, t) {
				return this.document.queryCommandValue("formatblock")
			}
		}, Edit.ui[e] = function(t) {
			var n = new Edit.ui.Button({
				name: e,
				className: "eicon-" + e,
				title: t.options.lang[e],
				handles: {
					click: function() {
						if (!n.isDisabled()) {
							var i = this,
								o = new Edit.ui.Panel({
									content: Edit.ui.createEl("ul", {
										class: "menu-list",
										style: Edit.ui.getPanelOffset(i.id)
									}, Edit.utils.map(t.options[e + "s"], function(n, i) {
										return Edit.ui.createEl("li", {
											class: "menu-item",
											title: i
										}, [Edit.ui.createEl(n, [i])], {
											click: function(i) {
												t.execCommand(e, n), Edit.ui.closePanel()
											}
										})
									}), {
										mousewheel: Edit.ui.bodyNotScroll
									})
								});
							o.show()
						}
					}
				}
			});
			return t.addListener("selectionchange", function() {
				var i = t.queryCommandValue(e);
				/h+/.test(i) ? n.setChecked(!0) : n.setChecked(!1)
			}), n
		}
	}), ["fontname"].forEach(function(e) {
		Edit.commands[e] = {
			execCommand: function(e, t) {
				this.document.execCommand(e, !1, t)
			},
			queryCommandState: function(e, t) {
				return this.document.queryCommandState(e)
			},
			queryCommandValue: function(e, t) {
				return this.document.queryCommandValue(e)
			}
		}, Edit.ui[e] = function(t) {
			var n = new Edit.ui.Button({
				name: e,
				className: "eicon-" + e,
				title: t.options.lang[e],
				handles: {
					click: function() {
						if (!n.isDisabled()) {
							var i = this,
								o = new Edit.ui.Panel({
									content: Edit.ui.createEl("ul", {
										class: "menu-list",
										style: Edit.ui.getPanelOffset(i.id)
									}, Edit.utils.map(t.options[e + "s"], function(n, i) {
										return Edit.ui.createEl("li", {
											class: "menu-item",
											title: n
										}, [Edit.ui.createEl("span", {
											style: "font-family:" + n
										}, [n])], {
											click: function(i) {
												t.execCommand(e, n), Edit.ui.closePanel()
											}
										})
									}), {
										mousewheel: Edit.ui.bodyNotScroll
									})
								});
							o.show()
						}
					}
				}
			});
			return t.addListener("selectionchange", function() {
				var i = t.queryCommandValue(e);
				"sans-serif" === i ? n.setChecked(!1) : n.setChecked(!0)
			}), n
		}
	}), ["fontsize"].forEach(function(e) {
		Edit.commands[e] = {
			execCommand: function(e, t) {
				this.document.execCommand(e, !1, t)
			},
			queryCommandState: function(e, t) {
				return this.document.queryCommandState(e)
			},
			queryCommandValue: function(e, t) {
				return this.document.queryCommandValue(e)
			}
		}, Edit.ui[e] = function(t) {
			var n = Edit.utils.map(t.options.fontsizes, function(e, t) {
					return e + ""
				}),
				i = new Edit.ui.Button({
					name: e,
					className: "eicon-" + e,
					title: t.options.lang[e],
					handles: {
						click: function() {
							if (!i.isDisabled()) {
								var n = this,
									o = new Edit.ui.Panel({
										content: Edit.ui.createEl("ul", {
											class: "menu-list",
											style: Edit.ui.getPanelOffset(n.id)
										}, Edit.utils.map(t.options[e + "s"], function(n, i) {
											return Edit.ui.createEl("li", {
												class: "menu-item",
												title: i,
												style: "font-size:" + i
											}, [i], {
												click: function(i) {
													t.execCommand(e, n), Edit.ui.closePanel()
												}
											})
										}), {
											mousewheel: Edit.ui.bodyNotScroll
										})
									});
								o.show()
							}
						}
					}
				});
			return t.addListener("selectionchange", function() {
				var o = t.queryCommandValue(e);
				n.indexOf(o) != -1 ? i.setChecked(!0) : i.setChecked(!1)
			}), i
		}
	}), ["code"].forEach(function(e) {
		Edit.ui[e] = function(t) {
			var n = new Edit.ui.Button({
				name: e,
				className: "eicon-" + e,
				title: t.options.lang[e],
				handles: {
					click: function() {
						n.isDisabled() || (n.isChecked() ? (t.body.innerHTML = t.body.textContent, t.body.contentEditable = !0, n.setChecked(
							!1), t.restoreSelection(), t.body.focus(), Edit.utils.each(t.buttons, function(e, t) {
							e != n && e.setDisabled(!1)
						})) : (t.saveSelection(), t.body.contentEditable = !1, t.body.textContent = t.body.innerHTML, n.setChecked(
							!0), Edit.utils.each(t.buttons, function(e, t) {
							e != n && e.setDisabled(!0)
						})))
					}
				}
			});
			return n
		}
	}), ["insertcode"].forEach(function(e) {
		Edit.commands[e] = {
			execCommand: function(t, n) {
				var i = this,
					o = i.getRangeElem("pre"),
					a = i.matchSelector(o, "pre");
				if (a) {
					var r = o.innerHTML;
					if (o.parentNode.removeChild(o), "<br>" !== r) {
						this.execCommand("inserthtml", "<p><br>" + r + "</p><p><br></p>");
						var s = i.getRangeElem().previousSibling;
						s.removeChild(s.firstChild)
					} else this.execCommand("inserthtml", "<p><br></p>");
					Edit.utils.each(i.buttons, function(e, t) {
						e.setDisabled(!1)
					})
				} else {
					this.execCommand("inserthtml",
						'<pre style="border: 1px solid #f0f3f6;background:#f8f8f8;padding:10px;margin:5px 0;font-size:.8em;border-radius:3px;"><br></pre>'
					);
					var c = i.getRangeElem(),
						s = this.document.createElement("p");
					s.innerHTML = "<br>";
					var d = c.nextSibling;
					d || c.parentNode.appendChild(s), Edit.utils.each(i.buttons, function(t, n) {
						t != i.buttons[e] && t.setDisabled(!0)
					})
				}
			},
			queryCommandState: function(e, t) {
				return this.matchSelector(this.getRangeElem("pre"), "pre")
			}
		}, Edit.ui[e] = function(t) {
			var n = new Edit.ui.Button({
				name: e,
				className: "eicon-" + e,
				title: t.options.lang[e],
				handles: {
					click: function() {
						n.isDisabled() || t.execCommand(e)
					}
				}
			});
			return t.addListener("selectionchange", function() {
				var i = t.queryCommandState(e);
				i ? n.setChecked(!0) : n.setChecked(!1)
			}), t.addListener("mouseup", function(e) {
				t.matchSelector(t.getRangeElem("pre"), "pre") ? Edit.utils.each(t.buttons, function(e, n) {
					e != t.buttons.insertcode && e.setDisabled(!0)
				}) : t.buttons.code && !t.buttons.code.isChecked() && Edit.utils.each(t.buttons, function(e, t) {
					e.setDisabled(!1)
				})
			}), n
		}
	}), ["quotes"].forEach(function(e) {
		Edit.commands[e] = {
			execCommand: function(e, t) {
				var n = this,
					i = n.getRangeElem("blockquote"),
					o = n.matchSelector(i, "blockquote");
				if (o) {
					var a = i.innerHTML;
					i.parentNode.removeChild(i), "<p><br></p>" !== a ? this.execCommand("inserthtml", a + "<p><br></p>") : this.execCommand(
						"inserthtml", "<p><br></p>")
				} else {
					this.execCommand("inserthtml",
						'<blockquote style="border-left:8px solid #d0e5f2;padding:5px 10px;margin:10px 0;line-height:1.4;font-size:100%;background-color:#f1f1f1;"><p><br></p></blockquote>'
					);
					var r = n.getRangeElem("blockquote"),
						s = this.document.createElement("p");
					s.innerHTML = "<br>";
					var c = r.nextSibling;
					c || r.parentNode.appendChild(s)
				}
			},
			queryCommandState: function(e, t) {
				return this.matchSelector(this.getRangeElem("blockquote"), "blockquote")
			}
		}, Edit.ui[e] = function(t) {
			var n = new Edit.ui.Button({
				name: e,
				className: "eicon-" + e,
				title: t.options.lang[e],
				handles: {
					click: function() {
						n.isDisabled() || t.execCommand(e)
					}
				}
			});
			return t.addListener("selectionchange", function() {
				var i = t.queryCommandState(e);
				i ? n.setChecked(!0) : n.setChecked(!1)
			}), n
		}
	}), ["createlink"].forEach(function(e) {
		Edit.commands[e] = {
			execCommand: function(e, t) {
				this.document.execCommand(e, !1, t)
			},
			queryCommandState: function(e, t) {
				return this.document.queryCommandState(e)
			},
			queryCommandValue: function(e, t) {
				return this.document.queryCommandValue(e)
			}
		}, Edit.ui[e] = function(t) {
			function n() {
				var n = document.getElementById("input-link").value;
				n && (t.execCommand(e, n), Edit.ui.closeDialog())
			}
			var i = new Edit.ui.Button({
				name: e,
				className: "eicon-" + e,
				title: t.options.lang[e],
				handles: {
					click: function() {
						if (!i.isDisabled()) {
							var e = Edit.ui.createEl,
								t = new Edit.ui.Dialog({
									title: "插入链接",
									confirm: n,
									content: e("div", {
										class: "link-wrap"
									}, [e("div", {
										class: "panel-content"
									}, [e("input", {
										id: "input-link",
										class: "input-text",
										type: "text",
										placeholder: "http://"
									})])])
								});
							t.show(), setTimeout(function() {
								document.getElementById("input-link").focus()
							}, 0)
						}
					}
				}
			});
			return t.addListener("selectionchange", function(n) {
				var o = t.queryCommandValue(e);
				o ? i.setChecked(!0) : i.setChecked(!1)
			}), i
		}
	}), ["insertimage"].forEach(function(e) {
		Edit.commands[e] = {
			execCommand: function(e, t) {
				this.execCommand("inserthtml", t)
			},
			queryCommandState: function(e, t) {
				return this.document.queryCommandState(e)
			},
			queryCommandValue: function(e, t) {
				return this.document.queryCommandValue(e)
			}
		}, Edit.ui[e] = function(t) {
			function n(e) {
				var n = this.files[0],
					i = /^(image\/bmp|image\/gif|image\/jpeg|image\/png|image\/jpg)$/i,
					o = t.options.serverUrl,
					r = "loading_" + (+new Date).toString(36),
					s = new FormData;
				s.append("file", n), s.append("imgInfo", !0), t.execCommand("inserthtml", '<img id="' + r +
					'" src="/lib/images/loading.gif" style="max-width:100% !important;height:auto;">'), i.test(n.type) && Edit.Ajax(
					o, "post", s,
					function(e) {
						var n = t.document.getElementById(r);
						console.log(e)
						n.setAttribute("src", e.data.url), e.data.height && n.setAttribute("height", e.data.height), e.data.width &&
							n.setAttribute("width", e.data.width), n.removeAttribute("id"), Edit.ui.closeDialog();
						var i = t.body.innerHTML;
						a[t.key].value !== i && (t.emit("contentchange"), a[t.key].value = i)
					})
			}

			function i() {
				var e = document.getElementById("input-src").value;
				e && (t.execCommand("inserthtml", '<img src="' + e + '" style="max-width:100%;height:auto;">'), Edit.ui.closeDialog())
			}

			function o() {
				var e = Array.prototype.slice.call(document.querySelectorAll(".panel-tab-btn"));
				e.forEach(function(t) {
					t.addEventListener("click", function() {
						e.forEach(function(e) {
							e.classList.remove("selected")
						}), this.classList.add("selected"), "img-url" === this.getAttribute("for") && setTimeout(function() {
							document.getElementById("input-src").focus()
						}, 0)
					})
				})
			}
			var r = new Edit.ui.Button({
				name: e,
				className: "eicon-" + e,
				title: t.options.lang[e],
				handles: {
					click: function() {
						if (!r.isDisabled()) {
							var e = Edit.ui.createEl,
								t = new Edit.ui.Dialog({
									title: "插入图片",
									confirm: i,
									content: e("div", {
										class: "img-wrap"
									}, [e("div", {
										class: "label-box"
									}, [e("label", {
										class: "panel-tab-btn selected",
										for: "img-file"
									}, ["上传图片"]), e("label", {
										class: "panel-tab-btn",
										for: "img-url"
									}, ["网络图片"])]), e("div", {
										class: "panel-content"
									}, [e("input", {
										class: "panel-tab-radio",
										id: "img-file",
										type: "radio",
										name: "radio",
										checked: !0
									}), e("div", {
										class: "panel-tab-content"
									}, [e("label", {
										class: "eicon eicon-upload",
										for: "upload"
									}), e("input", {
										id: "upload",
										class: "upload",
										type: "file"
									}, {
										change: n
									})]), e("input", {
										class: "panel-tab-radio",
										id: "img-url",
										type: "radio",
										name: "radio"
									}), e("div", {
										class: "panel-tab-content"
									}, [e("input", {
										id: "input-src",
										class: "input-text",
										type: "text",
										placeholder: "http://"
									})])])])
								});
							t.show(o)
						}
					}
				}
			});
			return t.addListener("selectionchange", function() {
				var n = t.queryCommandValue(e);
				n ? r.setChecked(!0) : r.setChecked(!1)
			}), r
		}
	}), ["insertvideo"].forEach(function(e) {
		Edit.commands[e] = {
			execCommand: function(e, t) {
				this.execCommand("inserthtml", t)
			},
			queryCommandState: function(e, t) {
				return this.document.queryCommandState(e)
			},
			queryCommandValue: function(e, t) {
				return this.document.queryCommandValue(e)
			}
		}, Edit.ui[e] = function(t) {
			function n(e) {
				if (e) {
					var t = {
							mp4: "video/mp4",
							ogg: "video/ogg",
							webm: "video/webm"
						},
						n = e.lastIndexOf("."),
						i = e.length,
						o = e.substring(n, i);
					return t[o] ? '<source src="' + e + '" type="' + o + '">' : '<source src="' + e + '">'
				}
			}

			function i() {
				var i = document.getElementById("input-src").value;
				if (i) {
					var o = n(i),
						a = document.getElementById("input-v-width").value,
						r = document.getElementById("input-v-height").value,
						s = ['<video width="' + a + 'px" height="' + r + 'px" controls>', o, "</video>"].join("");
					t.execCommand(e, s), Edit.ui.closeDialog()
				}
			}
			var o = new Edit.ui.Button({
				name: e,
				className: "eicon-" + e,
				title: t.options.lang[e],
				handles: {
					click: function() {
						if (!o.isDisabled()) {
							var e = Edit.ui.createEl,
								t = new Edit.ui.Dialog({
									title: "插入视频",
									confirm: i,
									content: e("div", {
										class: "video-wrap"
									}, [e("input", {
										id: "input-src",
										class: "input-text",
										type: "text",
										placeholder: ".mp4/.ogg/.webm"
									}), e("div", {
										class: "panel-props",
										style: "margin-top:10px;"
									}, ["宽", e("input", {
										id: "input-v-width",
										class: "input-text",
										type: "text",
										style: "width:40px;margin:0 5px;text-align:center;",
										value: "320"
									}), "px", e("span", {
										class: "editor-space",
										style: "width:20px;"
									}), "高", e("input", {
										id: "input-v-height",
										class: "input-text",
										type: "text",
										style: "width:40px;margin:0 5px;text-align:center;",
										value: "240"
									}), "px"])])
								});
							t.show(), setTimeout(function() {
								document.getElementById("input-src").focus()
							}, 0)
						}
					}
				}
			});
			return t.addListener("selectionchange", function() {
				var n = t.queryCommandValue(e);
				n ? o.setChecked(!0) : o.setChecked(!1)
			}), o
		}
	}), ["undo", "redo"].forEach(function(e) {
		Edit.commands[e] = {
			execCommand: function(t) {
				this.document.execCommand(e, !1, null)
			}
		}, Edit.ui[e] = function(t) {
			var n = new Edit.ui.Button({
				name: e,
				className: "eicon-" + e,
				title: t.options.lang[e],
				handles: {
					click: function() {
						t.execCommand(e)
					}
				}
			});
			return n
		}
	}), l.register("autouplod", function() {
		function e(e) {
			return e.clipboardData && e.clipboardData.items && 1 == e.clipboardData.items.length && /^image\//.test(e.clipboardData
				.items[0].type) ? e.clipboardData.items : null
		}

		function t(e) {
			return e.dataTransfer && e.dataTransfer.files ? e.dataTransfer.files : null
		}

		function n(e, t) {
			var n = t.options.serverBase64Url;
			if (n) {
				var i = new FormData,
					o = "loading_" + (+new Date).toString(36);
				i.append("data", e), t.execCommand("inserthtml", '<img id="' + o +
					'" src="/lib/images/loading.gif" style="max-width:100%;height:auto;">'), Edit.Ajax(n, "post", i, function(e) {
					var n = t.document.getElementById(o);
					n.setAttribute("src", e.data.url), n.removeAttribute("id"), Edit.ui.closePanel()
				})
			} else t.execCommand("inserthtml", '<img style="max-width:100%;height:auto;" src="' + e + '">')
		}
		return {
			bindEvents: {
				ready: function(i) {
					var o = this;
					window.FormData && window.FileReader && (o.bind(o.body, "paste drop", function(i) {
						var a, r = !1;
						if (a = "paste" == i.type ? e(i) : t(i)) {
							for (var s, c = a.length; c--;)
								if (s = a[c], s.getAsFile && (s = s.getAsFile()), s && s.size > 0) {
									r = !0;
									var d = new FileReader;
									d.onload = function(e) {
										var t = e.target.result;
										n(t, o)
									}, d.readAsDataURL(s)
								} r && i.preventDefault()
						}
					}), o.bind(o.body, "dragover", function(e) {
						"Files" == e.dataTransfer.types[0] && e.preventDefault()
					}))
				}
			}
		}
	}), window.Edit
});
